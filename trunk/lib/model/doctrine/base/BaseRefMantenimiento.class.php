<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('RefMantenimiento', 'doctrine');

/**
 * BaseRefMantenimiento
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id_ref_mantenimiento
 * @property string $nombre
 * @property string $descripcion
 * @property date $fecha_programada
 * @property integer $is_ejecutado
 * @property integer $id_asignador
 * @property integer $id_ejecutor
 * @property integer $id_ref_elemento
 * @property Usuario $Asignador
 * @property Usuario $Ejecutor
 * @property RefElemento $RefElemento
 * 
 * @method integer          getIdRefMantenimiento()   Returns the current record's "id_ref_mantenimiento" value
 * @method string           getNombre()               Returns the current record's "nombre" value
 * @method string           getDescripcion()          Returns the current record's "descripcion" value
 * @method date             getFechaProgramada()      Returns the current record's "fecha_programada" value
 * @method integer          getIsEjecutado()          Returns the current record's "is_ejecutado" value
 * @method integer          getIdAsignador()          Returns the current record's "id_asignador" value
 * @method integer          getIdEjecutor()           Returns the current record's "id_ejecutor" value
 * @method integer          getIdRefElemento()        Returns the current record's "id_ref_elemento" value
 * @method Usuario          getAsignador()            Returns the current record's "Asignador" value
 * @method Usuario          getEjecutor()             Returns the current record's "Ejecutor" value
 * @method RefElemento      getRefElemento()          Returns the current record's "RefElemento" value
 * @method RefMantenimiento setIdRefMantenimiento()   Sets the current record's "id_ref_mantenimiento" value
 * @method RefMantenimiento setNombre()               Sets the current record's "nombre" value
 * @method RefMantenimiento setDescripcion()          Sets the current record's "descripcion" value
 * @method RefMantenimiento setFechaProgramada()      Sets the current record's "fecha_programada" value
 * @method RefMantenimiento setIsEjecutado()          Sets the current record's "is_ejecutado" value
 * @method RefMantenimiento setIdAsignador()          Sets the current record's "id_asignador" value
 * @method RefMantenimiento setIdEjecutor()           Sets the current record's "id_ejecutor" value
 * @method RefMantenimiento setIdRefElemento()        Sets the current record's "id_ref_elemento" value
 * @method RefMantenimiento setAsignador()            Sets the current record's "Asignador" value
 * @method RefMantenimiento setEjecutor()             Sets the current record's "Ejecutor" value
 * @method RefMantenimiento setRefElemento()          Sets the current record's "RefElemento" value
 * 
 * @package    sicara2
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseRefMantenimiento extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('ref_mantenimiento');
        $this->hasColumn('id_ref_mantenimiento', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('nombre', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 150,
             ));
        $this->hasColumn('descripcion', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('fecha_programada', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('is_ejecutado', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('id_asignador', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('id_ejecutor', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('id_ref_elemento', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Usuario as Asignador', array(
             'local' => 'id_asignador',
             'foreign' => 'id_usuario'));

        $this->hasOne('Usuario as Ejecutor', array(
             'local' => 'id_ejecutor',
             'foreign' => 'id_usuario'));

        $this->hasOne('RefElemento', array(
             'local' => 'id_ref_elemento',
             'foreign' => 'id_ref_elemento'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $this->actAs($timestampable0);
    }
}